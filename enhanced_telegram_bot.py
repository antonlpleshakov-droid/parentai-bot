"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram Bot –¥–ª—è ParentAI —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
"""

import logging
import json
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from config import TELEGRAM_BOT_TOKEN, BOT_NAME
from ai_service import ParentAIService

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize AI service with RAG system
BOOK_PATH = "–ü–µ—Ç—Ä–∞–Ω–æ–≤—Å–∫–∞—è_–¢–∞–π–Ω–∞—è –æ–ø–æ—Ä–∞.pdf"
ai_service = ParentAIService(book_path=BOOK_PATH)

# User data storage with enhanced features
user_data = {}

class EnhancedParentAIBot:
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()
        self.load_user_data()
    
    def load_user_data(self):
        """Load user data from file if exists"""
        try:
            if os.path.exists('user_data.json'):
                with open('user_data.json', 'r', encoding='utf-8') as f:
                    global user_data
                    user_data = json.load(f)
                logger.info(f"Loaded user data for {len(user_data)} users")
        except Exception as e:
            logger.error(f"Error loading user data: {e}")
    
    def save_user_data(self):
        """Save user data to file"""
        try:
            with open('user_data.json', 'w', encoding='utf-8') as f:
                json.dump(user_data, f, ensure_ascii=False, indent=2)
            logger.info("User data saved successfully")
        except Exception as e:
            logger.error(f"Error saving user data: {e}")
    
    def setup_handlers(self):
        """Set up all bot handlers."""
        # Command handlers
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("age", self.age_command))
        self.application.add_handler(CommandHandler("topics", self.topics_command))
        self.application.add_handler(CommandHandler("history", self.history_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("profile", self.profile_command))
        
        # Message handlers
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # Callback query handlers
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command."""
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # Initialize user data if not exists
        if user_id not in user_data:
            user_data[user_id] = {
                'name': user_name,
                'child_age_months': None,
                'context': '',
                'conversation_history': [],
                'total_questions': 0,
                'favorite_topics': [],
                'registration_date': datetime.now().isoformat(),
                'last_activity': datetime.now().isoformat()
            }
            self.save_user_data()
        
        # Update last activity
        user_data[user_id]['last_activity'] = datetime.now().isoformat()
        
        welcome_message = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {BOT_NAME}, {user_name}!

–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—é –¥–µ—Ç–µ–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –∫–Ω–∏–≥–µ –õ—é–¥–º–∏–ª—ã –ü–µ—Ç—Ä–∞–Ω–æ–≤—Å–∫–æ–π "–¢–∞–π–Ω–∞—è –æ–ø–æ—Ä–∞".

–Ø –¥–∞—é —Å–æ–≤–µ—Ç—ã, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–æ—Ä–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö, –æ–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–π –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–π –∫–Ω–∏–≥–µ.

**–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
üìö –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–∞–º

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /age —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
2. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–∏
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /topics —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /history —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤

–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å –æ –≤–∞—à–µ–º –º–∞–ª—ã—à–µ? ü§±
        """
        
        keyboard = [
            [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞", callback_data="set_age")],
            [InlineKeyboardButton("–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã", callback_data="show_topics")],
            [InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤", callback_data="show_history")],
            [InlineKeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command."""
        help_text = """
üìö **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ParentAI:**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/age - –£–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
/topics - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —è –º–æ–≥—É –ø–æ–º–æ—á—å
/history - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤
/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —è –º–æ–≥—É –ø–æ–º–æ—á—å:**
‚Ä¢ –ü–æ—á–µ–º—É –º–æ–π —Ä–µ–±–µ–Ω–æ–∫ –ø–ª–∞—á–µ—Ç –∏ —á—Ç–æ –¥–µ–ª–∞—Ç—å?
‚Ä¢ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É?
‚Ä¢ –ö–∞–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –º–æ–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º –∏ —Ä–µ–∂–∏–º–æ–º
‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –∫–æ—Ä–º–ª–µ–Ω–∏—é –∏ –ø–∏—Ç–∞–Ω–∏—é
‚Ä¢ –≠—Ç–∞–ø—ã —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ–±–µ–Ω–∫–∞
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –¥–µ—Ç—Å–∫–æ–º—É —Å–∞–¥—É
‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏

**–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
‚Ä¢ –Ø —Ä–∞–±–æ—Ç–∞—é 24/7 –¥–ª—è –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–∏!
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /history —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ–≤–µ—Ç–∞–º

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –¥–∞–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –ü–µ—Ç—Ä–∞–Ω–æ–≤—Å–∫–æ–π —Å–æ–≤–µ—Ç. üíï
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def age_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /age command to set child's age."""
        keyboard = [
            [InlineKeyboardButton("0-3 –º–µ—Å—è—Ü–∞", callback_data="age_1")],
            [InlineKeyboardButton("3-6 –º–µ—Å—è—Ü–µ–≤", callback_data="age_4")],
            [InlineKeyboardButton("6-12 –º–µ—Å—è—Ü–µ–≤", callback_data="age_8")],
            [InlineKeyboardButton("1-2 –≥–æ–¥–∞", callback_data="age_15")],
            [InlineKeyboardButton("2-3 –≥–æ–¥–∞", callback_data="age_30")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤:",
            reply_markup=reply_markup
        )
    
    async def topics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /topics command."""
        topics_text = """
üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —è –º–æ–≥—É –ø–æ–º–æ—á—å:**

**–ü–ª–∞—á –∏ —É—Ç–µ—à–µ–Ω–∏–µ:**
‚Ä¢ –ü–æ—á–µ–º—É —Ä–µ–±–µ–Ω–æ–∫ –ø–ª–∞—á–µ—Ç?
‚Ä¢ –ö–∞–∫ —É—Å–ø–æ–∫–æ–∏—Ç—å –∫–∞–ø—Ä–∏–∑–Ω–æ–≥–æ –º–∞–ª—ã—à–∞
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º –∏ —Ä–µ–∂–∏–º–æ–º

**–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ:**
‚Ä¢ –ö–æ–≥–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–≤–∏–≤–æ–∫
‚Ä¢ –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º

**–†–∞–∑–≤–∏—Ç–∏–µ –∏ –∑–∞–Ω—è—Ç–∏—è:**
‚Ä¢ –ó–∞–Ω—è—Ç–∏—è, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
‚Ä¢ –≠—Ç–∞–ø—ã —Ä–∞–∑–≤–∏—Ç–∏—è
‚Ä¢ –ò–¥–µ–∏ –¥–ª—è –∏–≥—Ä –∏ –æ–±—É—á–µ–Ω–∏—è

**–ö–æ—Ä–º–ª–µ–Ω–∏–µ –∏ –ø–∏—Ç–∞–Ω–∏–µ:**
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥—Ä—É–¥–Ω–æ–≥–æ –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏—è
‚Ä¢ –í–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–∫–æ—Ä–º–∞
‚Ä¢ –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –µ–¥–æ–π

**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:**
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–æ–º–∞
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–µ—Ä–∏–∫–∞–º–∏
‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞

**–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∏ —Å–æ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:**
‚Ä¢ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –¥–µ—Ç—Å–∫–æ–º—É —Å–∞–¥—É
‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤

–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö —Ç–µ–º! üí¨
        """
        await update.message.reply_text(topics_text, parse_mode='Markdown')
    
    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /history command."""
        user_id = update.effective_user.id
        
        if user_id not in user_data or not user_data[user_id]['conversation_history']:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã!")
            return
        
        history = user_data[user_id]['conversation_history']
        
        if len(history) <= 5:
            # Show all history if 5 or fewer items
            history_text = "üìö **–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤:**\n\n"
            for i, item in enumerate(history, 1):
                history_text += f"**{i}.** {item['question'][:50]}...\n"
                history_text += f"   *{item['answer'][:100]}...*\n\n"
        else:
            # Show last 5 items
            history_text = "üìö **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–∏–∞–ª–æ–≥–æ–≤:**\n\n"
            for i, item in enumerate(history[-5:], 1):
                history_text += f"**{i}.** {item['question'][:50]}...\n"
                history_text += f"   *{item['answer'][:100]}...*\n\n"
        
        history_text += f"–í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {len(history)}"
        
        await update.message.reply_text(history_text, parse_mode='Markdown')
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /stats command."""
        user_id = update.effective_user.id
        
        if user_id not in user_data:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º!")
            return
        
        user_info = user_data[user_id]
        total_questions = user_info.get('total_questions', 0)
        registration_date = user_info.get('registration_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        last_activity = user_info.get('last_activity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        child_age = user_info.get('child_age_months')
        
        age_text = "–ù–µ —É–∫–∞–∑–∞–Ω"
        if child_age:
            age_groups = {
                1: "0-3 –º–µ—Å—è—Ü–∞",
                4: "3-6 –º–µ—Å—è—Ü–µ–≤", 
                8: "6-12 –º–µ—Å—è—Ü–µ–≤",
                15: "1-2 –≥–æ–¥–∞",
                30: "2-3 –≥–æ–¥–∞"
            }
            age_text = age_groups.get(child_age, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        stats_text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ –ò–º—è: {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞: {age_text}
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date[:10] if registration_date != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity[:16] if last_activity != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

üéØ **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã:**
{', '.join(user_info.get('favorite_topics', ['–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö']))}

üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /age —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤!
        """
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /profile command."""
        user_id = update.effective_user.id
        
        if user_id not in user_data:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º!")
            return
        
        user_info = user_data[user_id]
        
        keyboard = [
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞", callback_data="set_age")],
            [InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        profile_text = f"""
üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**

**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ò–º—è: {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞: {user_info.get('child_age_months', '–ù–µ —É–∫–∞–∑–∞–Ω')} –º–µ—Å—è—Ü–µ–≤
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info.get('registration_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {user_info.get('total_questions', 0)}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_info.get('last_activity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.
        """
        
        await update.message.reply_text(profile_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle regular text messages."""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # Initialize user data if not exists
        if user_id not in user_data:
            user_data[user_id] = {
                'name': update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                'child_age_months': None,
                'context': '',
                'conversation_history': [],
                'total_questions': 0,
                'favorite_topics': [],
                'registration_date': datetime.now().isoformat(),
                'last_activity': datetime.now().isoformat()
            }
        
        # Update user activity
        user_data[user_id]['last_activity'] = datetime.now().isoformat()
        user_data[user_id]['total_questions'] += 1
        
        # Show typing indicator
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        # Get AI response
        child_age = user_data[user_id]['child_age_months']
        user_context = user_data[user_id]['context']
        
        response = ai_service.generate_response(message_text, child_age, user_context)
        
        # Store conversation
        conversation_item = {
            'question': message_text,
            'answer': response,
            'timestamp': datetime.now().isoformat(),
            'child_age': child_age
        }
        user_data[user_id]['conversation_history'].append(conversation_item)
        
        # Update favorite topics
        topic = ai_service.extract_topic_from_question(message_text)
        if topic not in user_data[user_id]['favorite_topics']:
            user_data[user_id]['favorite_topics'].append(topic)
        
        # Save user data
        self.save_user_data()
        
        # Send response
        await update.message.reply_text(response)
        
        # Add quick action buttons for common topics
        keyboard = [
            [InlineKeyboardButton("–ü–æ—á–µ–º—É —Ä–µ–±–µ–Ω–æ–∫ –ø–ª–∞—á–µ—Ç?", callback_data="quick_crying")],
            [InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º", callback_data="quick_sleep")],
            [InlineKeyboardButton("–ó–∞–Ω—è—Ç–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data="quick_activities")],
            [InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤", callback_data="show_history")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —á–µ–º-—Ç–æ –µ—â–µ? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ —á–∞—Å—Ç—ã–µ —Ç–µ–º—ã:",
            reply_markup=reply_markup
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries from inline keyboards."""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data.startswith("age_"):
            # Handle age selection
            age_months = int(data.split("_")[1])
            user_data[user_id]['child_age_months'] = age_months
            
            age_groups = {
                1: "0-3 –º–µ—Å—è—Ü–∞",
                4: "3-6 –º–µ—Å—è—Ü–µ–≤", 
                8: "6-12 –º–µ—Å—è—Ü–µ–≤",
                15: "1-2 –≥–æ–¥–∞",
                30: "2-3 –≥–æ–¥–∞"
            }
            
            age_group = age_groups.get(age_months, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            await query.edit_message_text(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤–æ–∑—Ä–∞—Å—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –∫–∞–∫ {age_group}. –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã!")
        
        elif data == "set_age":
            await self.age_command(update, context)
        
        elif data == "show_topics":
            await self.topics_command(update, context)
        
        elif data == "show_history":
            await self.history_command(update, context)
        
        elif data == "show_profile":
            await self.profile_command(update, context)
        
        elif data == "quick_crying":
            response = ai_service.generate_response(
                "–ú–æ–π —Ä–µ–±–µ–Ω–æ–∫ –ø–ª–∞—á–µ—Ç –∏ —è –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å",
                user_data[user_id]['child_age_months']
            )
            await query.edit_message_text(response)
        
        elif data == "quick_sleep":
            response = ai_service.generate_response(
                "–ö–∞–∫ —É–ª–æ–∂–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞ —Å–ø–∞—Ç—å?",
                user_data[user_id]['child_age_months']
            )
            await query.edit_message_text(response)
        
        elif data == "quick_activities":
            response = ai_service.generate_response(
                "–ö–∞–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –º–æ–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?",
                user_data[user_id]['child_age_months']
            )
            await query.edit_message_text(response)
        
        elif data == "clear_history":
            user_data[user_id]['conversation_history'] = []
            self.save_user_data()
            await query.edit_message_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –æ—á–∏—â–µ–Ω–∞!")
        
        elif data == "back_to_main":
            await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
    
    def run(self):
        """Start the bot."""
        logger.info(f"Starting {BOT_NAME}...")
        self.application.run_polling()

if __name__ == "__main__":
    bot = EnhancedParentAIBot()
    bot.run()
